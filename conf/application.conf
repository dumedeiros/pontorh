java.runtime.version=1.8

# This is the main configuration file for the application.
# ~~~~~
application.name=# Ponto RH

# Application mode
# ~~~~~
# Set to dev to enable instant reloading and other development help.
# Otherwise set to prod.
application.mode=prod
%dev.application.mode=dev

# Secret key
# ~~~~~
# The secret key is used to secure cryptographics functions
# If you deploy your application to several instances be sure to use the same key !
application.secret=dmWJ1rbpN5UPuiO7CVG4LjaUHtI0i2v09QZ6bAsMCezjhwNAAZk1ZsY6RuIaYJJN

# i18n
# ~~~~~
# Define locales used by your application.
# You can then place localized messages in conf/messages.{locale} files
application.langs=pt-br

# Date format
# ~~~~~
date.format=dd/MM/yyyy

# Server configuration
# ~~~~~
# If you need to change the HTTP port, uncomment this (default is set to 9000)
 http.port=9000
#
# By default the server listen for HTTP on the wilcard address.
# You can restrict this.
# http.address=127.0.0.1
#
# Use this if you don't host your Play application at the root of the domain
# you're serving it from. This parameter has no effect when deployed as a
# war, because the path will be handled by the application server.
# http.path=/

# Session configuration
# ~~~~~~~~~~~~~~~~~~~~~~
# By default, session will be written to the transient PLAY_SESSION cookie.
# The cookies are not secured by default, only set it to true
# if you're serving your pages through https.
# application.session.cookie=PLAY
# application.session.maxAge=1h
# application.session.secure=false

# Session/Cookie sharing between subdomain
# ~~~~~~~~~~~~~~~~~~~~~~
# By default a cookie is only valid for a specific domain. By setting
# application.defaultCookieDomain to '.example.com', the cookies
# will be valid for all domains ending with '.example.com', ie:
# foo.example.com and bar.example.com
# application.defaultCookieDomain=.example.com

# JVM configuration
# ~~~~~
# Define which port is used by JPDA when application is in debug mode (default is set to 8000)
# jpda.port=8000
#
# Java source level => 1.5, 1.6 or 1.7 (experimental)
 java.source=1.6

# Log level
# ~~~~~
# Specify log level for your application.
# If you want a very customized log, create a log4j.properties file in the conf directory
 application.log=DEBUG
#
# More logging configuration
# application.log.path=/log4j.properties
 application.log.system.out=off

# Database configuration
# ~~~~~ 
# Enable a database engine if needed.
#
# To quickly set up a development database, use either:
#   - mem : for a transient in memory database (H2 in memory)
#   - fs  : for a simple file written database (H2 file stored)
 #db=mem
#
# To connect to a local MySQL5 database, use:
db.default=mysql://root:root@localhost/pontorh
%dev.db.default=mysql://root:root@localhost/pontorh
#
# To connect to a local PostgreSQL9 database, use:
 #db=postgres://user:pwd@host/database
 #db=postgres://postgres:postgres@localhost/postgres
#
# If you need a full JDBC configuration use the following :
 #db.url=jdbc:postgresql:postgres
 #db.driver=org.postgresql.Driver
 #db.user=postgres
 #db.pass=postgres
#
# Connections pool configuration :
# db.pool.timeout=1000
# db.pool.maxSize=30
# db.pool.minSize=10
#
# If you want to reuse an existing Datasource from your application server, use:
# db=java:/comp/env/jdbc/myDatasource
#
# When using an existing Datasource, it's sometimes needed to destroy it when
# the application is stopped. Depending on the datasource, you can define a
# generic "destroy" method :
# db.destroyMethod=close

# JPA Configuration (Hibernate)
# ~~~~~
#
# Specify the custom JPA dialect to use here (default to guess):
 #jpa.dialect=org.hibernate.dialect.PostgreSQLDialect
#
# Specify the ddl generation pattern to use. Set to none to disable it
# (default to update in DEV mode, and none in PROD mode):

jpa.default.ddl=none
%dev.jpa.default.ddl=create

#
# Debug SQL statements (logged using DEBUG level):
# jpa.debugSQL=true
#
# You can even specify additional hibernate properties here:
# hibernate.use_sql_comments=true
# ...
#
# Store path for Blob content
attachments.path=data/attachments

# Memcached configuration
# ~~~~~ 
# Enable memcached if needed. Otherwise a local cache is used.
# memcached=enabled
#
# Specify memcached host (default to 127.0.0.1:11211)
# memcached.host=127.0.0.1:11211
#
# Or you can specify multiple host to build a distributed cache
# memcached.1.host=127.0.0.1:11211
# memcached.2.host=127.0.0.1:11212
#
# Use plain SASL to authenticate for memcached
# memcached.user=
# memcached.password=

# HTTP Response headers control for static files
# ~~~~~
# Set the default max-age, telling the user's browser how long it should cache the page.
# Default is 3600 (one hour). Set it to 0 to send no-cache.
# This is only read in prod mode, in dev mode the cache is disabled.
# http.cacheControl=3600

# If enabled, Play will generate entity tags automatically and send a 304 when needed.
# Default is true, set it to false to deactivate use of entity tags.
# http.useETag=true

# Custom mime types
# mimetype.xpi=application/x-xpinstall

# WS configuration
# ~~~~~
# Default engine is Async Http Client, uncomment to use
# the JDK's internal implementation
# webservice = urlfetch
# If you need to set proxy params for WS requests
# http.proxyHost = localhost
# http.proxyPort = 3128
# http.proxyUser = jojo
# http.proxyPassword = jojo

# Mail configuration
# ~~~~~ 
# Default is to use a mock Mailer
#mail.smtp=mock

 #Or, specify mail host configuration
mail.smtp.host=smtp.gmail.com
mail.smtp.user=ehashsmail@gmail.com
mail.smtp.pass=mailehashs
mail.smtp.channel=ssl
mail.smtp.port=465

mailer.from=ehashsmail@gmail.com

# Url-resolving in Jobs
# ~~~~~~
# When rendering templates with reverse-url-resoling (@@{..}) in Jobs (which do not have an inbound Http.Request),
# ie if sending a HtmlMail, Play need to know which url your users use when accessing your app.
# %test.application.baseUrl=http://localhost:9000/
# %prod.application.baseUrl=http://www.yourdomain.com/

# Jobs executor
# ~~~~~~
# Size of the Jobs pool
# play.jobs.pool=10

# Execution pool
# ~~~~~
# Default to 1 thread in DEV mode or (nb processors + 1) threads in PROD mode.
# Try to keep a low as possible. 1 thread will serialize all requests (very useful for debugging purpose)
# play.pool=3

# Open file from errors pages
# ~~~~~
# If your text editor supports opening files by URL, Play! will
# dynamically link error pages to files 
#
# Example, for textmate:
# play.editor=txmt://open?url=file://%s&line=%s

# Testing. Set up a custom configuration for test mode
# ~~~~~
#%test.module.cobertura=${play.path}/modules/cobertura
#%test.application.mode=dev
#%test.db.url=jdbc:h2:mem:play;MODE=MYSQL;LOCK_MODE=0
#%test.jpa.ddl=create
#%test.mail.smtp=mock

################################################################################################
#
# Secure Social Module Settings
#
################################################################################################

#
# Login redirection
#
# Allows you to customize the page where users are redirected after logging in.
# Note that this is used when the user went to the login page directly, otherwise SecureSocial
# tries to redirect the user to the page he intended to access before authenticating.
#
securesocial.login.redirect=Application.index

#
# Logout redirection
#
# By default users are taken to the login page when they logout. You can customize that by specifying
# a controller and action here or a URL.
#
# securesocial.logout.redirect=MyController.myAction

#
# Mailer
#
securesocial.mailer.subject=Activate your account
securesocial.mailer.from=application@at.application.com

securesocial.mailer.reset.subject=Activate your account

securesocial.providers=userpass
#securesocial.providers=twitter,facebook,googleoauth2,liveoauth2,userpass,yahoooauth2

#
# Twitter
#
securesocial.twitter.requestTokenURL=https://twitter.com/oauth/request_token
securesocial.twitter.accessTokenURL=https://twitter.com/oauth/access_token
securesocial.twitter.authorizationURL=https://api.twitter.com/oauth/authorize
securesocial.twitter.consumerKey=eXTO0V2ebllKIIOmDA8S963ZD
securesocial.twitter.consumerSecret=jrqud0IRpq62M9v2c71XxvxWc0bNxD5skq8BoWveDK2RwC2a5W



#
# Facebook
#
securesocial.facebook.authorizationURL=https://graph.facebook.com/oauth/authorize
securesocial.facebook.accessTokenURL=https://graph.facebook.com/oauth/access_token
securesocial.facebook.clientid=1530196033959443
securesocial.facebook.secret=f6d0c0ac1548f9728c7d2cf95ae110a1
securesocial.facebook.scope=email

#
# Google
#
securesocial.google.requestTokenURL=https://www.google.com/accounts/OAuthGetRequestToken
securesocial.google.accessTokenURL=https://www.google.com/accounts/OAuthGetAccessToken
securesocial.google.authorizationURL=https://www.google.com/accounts/OAuthAuthorizeToken
securesocial.google.scope=http://www-opensocial.googleusercontent.com/api/people
securesocial.google.consumerKey=138880257039-r64q98ja2sdtuoubtnnlk1l9d5qg1rbl.apps.googleusercontent.com
securesocial.google.consumerSecret=OOvkhJquaotSqXPpyR9urqt4


#
# Google with OAuth2
#
securesocial.googleoauth2.authorizationURL=https://accounts.google.com/o/oauth2/auth
securesocial.googleoauth2.accessTokenURL=https://accounts.google.com/o/oauth2/token
securesocial.googleoauth2.scope=https://www.googleapis.com/auth/userinfo.profile https://www.googleapis.com/auth/userinfo.email
securesocial.googleoauth2.clientid=578025905284-2sklnbpd98l98fq2oc5d661897fk6rc6.apps.googleusercontent.com
securesocial.googleoauth2.secret=CleO3rnOWZO4kMS0cqBTY6Th
#securesocial.googleoauth2.access_type=post|get



# Yahoo with OAuth2

securesocial.yahoooauth2.authorizationURL=https://api.login.yahoo.com/oauth2/request_auth
securesocial.yahoooauth2.accessTokenURL=https://api.login.yahoo.com/oauth2/get_token
#securesocial.yahoooauth2.clientid=dj0yJmk9MlNXdU9XMkN6QWFQJmQ9WVdrOWNWcFpkV0U1TldrbWNHbzlNQS0tJnM9Y29uc3VtZXJzZWNyZXQmeD1hOQ--
#securesocial.yahoooauth2.secret=4199a95415bd77ace99cefef55be994d27d1bc34
securesocial.yahoooauth2.clientid=dj0yJmk9SFlZRmRnUGVUdzN3JmQ9WVdrOVQzSjBRbUZxTjJVbWNHbzlNQS0tJnM9Y29uc3VtZXJzZWNyZXQmeD03Ng--
securesocial.yahoooauth2.secret=66c3cdb8719309b163c24da2de96142c8842e223


# Live with OAuth2

#https://login.live.com/oauth20_authorize.srf?client_id=0000000044171B02&scope=wl.signin,wl.basic&response_type=code&redirect_uri=http://guarded-brook-6659.herokuapp.com&display=touch
securesocial.liveoauth2.authorizationURL=https://login.live.com/oauth20_authorize.srf
securesocial.liveoauth2.accessTokenURL=https://login.live.com/oauth20_token.srf
securesocial.liveoauth2.clientid=0000000044171B02
securesocial.liveoauth2.secret=LvHUkVs-ZKXoBjDMoY0Ul15ed4GS8afd
securesocial.liveoauth2.scope=wl.signin,wl.basic,wl.emails,wl.photos
#//TODO talvez adicione isso para ter acesso off line
#wl.offline_access
#securesocial.liveoauth2.scope=wl.signin,wl.basic,wl.offlince_access


#
# Yahoo
#
securesocial.yahoo.authorizationURL=https://api.login.yahoo.com/oauth/v2/request_auth
securesocial.yahoo.requestTokenURL=https://api.login.yahoo.com/oauth/v2/get_request_token
securesocial.yahoo.accessTokenURL=https://api.login.yahoo.com/oauth2/get_token
securesocial.yahoo.consumerKey=dj0yJmk9MlNXdU9XMkN6QWFQJmQ9WVdrOWNWcFpkV0U1TldrbWNHbzlNQS0tJnM9Y29uc3VtZXJzZWNyZXQmeD1hOQ--
securesocial.yahoo.consumerSecret=4199a95415bd77ace99cefef55be994d27d1bc34

#
# LinkedIn
#
securesocial.linkedin.requestTokenURL=https://api.linkedin.com/uas/oauth/requestToken
securesocial.linkedin.accessTokenURL=https://api.linkedin.com/uas/oauth/accessToken
securesocial.linkedin.authorizationURL=https://api.linkedin.com/uas/oauth/authenticate
securesocial.linkedin.consumerKey=your_consumer_key
securesocial.linkedin.consumerSecret=your_consumer_secret

#
# Foursquare
#
securesocial.foursquare.authorizationURL=https://foursquare.com/oauth2/authenticate?response_type=code
securesocial.foursquare.accessTokenURL=https://foursquare.com/oauth2/access_token?grant_type=authorization_code
securesocial.foursquare.clientid=your_client_id
securesocial.foursquare.secret=your_client_secret


#GITHUB
securesocial.github.authorizationURL=https://github.com/login/oauth/authorize
securesocial.github.accessTokenURL=https://github.com/login/oauth/access_token
securesocial.github.clientid=your_client_id
securesocial.github.secret=your_client_secret
securesocial.github.organization=optional_organization


#
# Deadbolt handler
#
deadbolt.handler=controllers.AppDeadboltHandler
